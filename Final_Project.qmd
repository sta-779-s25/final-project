---
title: "Title"
author: "Authors"
format:
  pdf:
    fontsize: 12pt
editor: visual
execute: 
  echo: false
  message: false
  warning: false
abstract:
  This is an abstract
---

```{r}
#Libraries

library(causaldata)
library(dagitty)
library(ggdag)
library(tidyverse)
library(knitr)
library(naniar)
library(gtsummary)
library(gt)
library(broom)
library(readxl)
library(propensity)
library(halfmoon)
library(patchwork)
library(visdat)
library(survey)
library(labelled)
library(tipr)

data("castle")
```

```{r}
castle_for_tab <- castle |> 
  select(!(starts_with("r20") |
             starts_with("trend") |
             starts_with("lead") |
             starts_with("lag"))) 

miss_tab <- miss_var_summary(castle_for_tab)
colnames(miss_tab) <- c("Variable", "Missing (n)", "Percent Missing")
miss_tab |>
  gt()

vis_miss(castle_for_tab)
```

```{r, echo = FALSE, warning = FALSE}
# Data transforms
castle$treat_year <- ifelse(castle$post == 1, castle$year, 0)

lower <- 1
upper <- 11
i <- 1
while(i < 51){
  treat_year_1 <- min(castle$treat_year[lower:upper][castle$treat_year[lower:upper] != 0])
  castle$treat_year[lower:upper] <- rep(treat_year_1, 11)
  lower <- upper + 1
  upper <- lower + 10
  i <- i + 1
}

castle <- castle |>
  mutate(years_after_treat = year - treat_year)

castle$years_after_treat <- ifelse(castle$years_after_treat == -Inf, NA, castle$years_after_treat)


castle <- castle |>
  group_by(sid) |>
  mutate_at(c("assault", "burglary", "larceny", "motor", "l_larceny", "l_motor", 
              "l_police", "l_income", "l_exp_subsidy", "l_exp_pubwelfare"), lag) |>
  mutate(murder_lag = lag(murder)) |> 
  ungroup()


castle$sid <- ifelse(as.numeric(castle$sid) > 8, castle$sid - 1, castle$sid)

state_id_ranks <- read_excel("state_id_ranks.xlsx", col_names = FALSE)
colnames(state_id_ranks) <- c("state", "pop", "sid")
state_id_ranks <- state_id_ranks |>
  select(state, sid)
castle_dat <- full_join(castle, state_id_ranks, by = "sid")

castle_dat <- castle_dat[castle_dat$year != 2000,]

#CCA + Dropping Washington
castle_dat <- castle_dat |> 
  select(!(starts_with("r20") |
             starts_with("trend") |
             starts_with("lead") |
             starts_with("lag"))) |>
  drop_na(robbery_gun_r) |>
  filter(sid != 13)

```

#DAG

```{r}
# young_male_race is taking place of blackm_15_24 + whitem_15_24 + blackm_25_44 + whitem_25_44

castle_dag <- dagify(
  murder ~ young_male_race + poverty + popwt + robbery_gun_r + l_police + post + years_after_treat + robbery,
  
  post ~ homicide + robbery_gun_r + assault + burglary + motor + murder_lag + robbery,
  
  burglary ~ poverty + young_male_race,
  homicide ~ poverty + young_male_race,
  motor ~ poverty + young_male_race,
  robbery ~ poverty + young_male_race,
  assault ~ poverty + young_male_race,
  
  poverty ~ unemployrt + l_exp_subsidy + l_exp_pubwelfare + l_income,
  
  l_police ~ l_income,
  
  outcome = "murder",
  exposure = "post",
  labels = c(
    murder = "Murder",
    murder_lag = "Murder Lagged",
    unemployrt = "Unemployment",
    young_male_race = "Male Demo.",
    poverty = "Poverty",
    popwt = "Population",
    robbery_gun_r = "Armed Robbery Prop.",
    l_exp_subsidy = "Subsidy",
    l_exp_pubwelfare = "Welfare",
    l_police = "Police",
    post = "Castle Doctrine",
    years_after_treat = "Years Post Castle",
    
    homicide = "Homicides",
    robbery = "Robbery",
    assault = "Assaults",
    burglary = "Burglary",
    motor = "Auto Theft",
    l_income = "Income")
)


```

```{r, fig.height=10, fig.width=10}
ggdag(castle_dag, layout = "nicely", use_labels = "label", text = FALSE) +
  labs(caption = "DAG") +
  theme_dag()

```

```{r, fig.height=10, fig.width=10}
ggdag_adjustment_set(castle_dag, text_col = "black", use_labels = "label", text = FALSE) +
  theme_dag()

adjustmentSets(castle_dag)

# use adjustment sets to build propensity score model

# check imbalance for variables not in DAG, adjust

# use weighting from propensity score in outcome model
    # add exposure + time to exposure + interaction
    # use g-comp technique

# use bootstrap to estimate standard error

# test effect for different years before/after - diff in diff
```

```{r}
castle_select <- castle_dat |>
  select(c(post, assault, burglary, homicide, motor, robbery, robbery_gun_r)) |> 
  mutate(post = ifelse(post == 0, "Pre-Doctrine", "Post-Doctrine")) |> 
  set_variable_labels(
    post = "Passage of Castle Doctrine",
    assault = "Assault",
    burglary = "Burglary",
    homicide = "Homicide",
    motor = "Motor Vehicle Theft",
    robbery = "Robbery",
    robbery_gun_r = "Armed Robbery"
  )

tbl_summary(
  castle_select,
  by = post
) |>
  add_overall(last = TRUE) |> 
  modify_caption("**Table 1: Sample Characteristics by Castle Doctrine**") |> 
  modify_footnote(everything() ~ "Rates per 100,000 persons")

```

```{r}
propensity_model <- glm(post ~ splines::ns(homicide, 5) + splines::ns(burglary, 6) + assault + motor + robbery + robbery_gun_r , data = castle_dat, family = "binomial")

castle_dat <- propensity_model |>
  augment(type.predict = "response", data = castle_dat) |>
  mutate(w_att = wt_att(.fitted, post, exposure_type = "binary"))

```

```{r}
castle_select2 <- castle_dat |>
  select(c(post, assault, burglary, homicide, motor, robbery, robbery_gun_r, w_att)) |> 
  mutate(post = ifelse(post == 0, "Pre-Doctrine", "Post-Doctrine")) |> 
    set_variable_labels(
    post = "Passage of Castle Doctrine",
    assault = "Assault",
    burglary = "Burglary",
    homicide = "Homicide",
    motor = "Motor Vehicle Theft",
    robbery = "Robbery",
    robbery_gun_r = "Armed Robbery"
  )

svy_des <- svydesign(
  ids = ~1,
  data = castle_select2,
  weights = ~w_att
)

hdr <- paste0(
  "**{level}**  \n",
  "N = {n_unweighted}; ESS = {format(n, digits = 1, nsmall = 1)}"
)

tbl_svysummary(svy_des,
               by = post,
               include = c(assault, burglary, homicide, motor, robbery, robbery_gun_r))|> 
    add_overall(last = TRUE) |> 
  add_ess_header(header = hdr) |> 
  modify_caption("**Table 2: Sample Characteristics by Re-Weighted Castle Doctrine**") |> 
  modify_footnote(everything() ~ "Rates per 100,000 persons")

```

```{r}
p1 <- ggplot(castle_dat, aes(x = .fitted, group = post, fill = post)) +
  geom_mirror_histogram(bins = 30, alpha = .6, aes(fill = factor(post))) +
  theme(legend.position = "bottom") +
  labs(x = "Propensity Score", fill = "Passed Castle Doctrine", caption = "Unweighted") +
  #ggtitle("Unweighted") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(labels = c("No", "Yes"), values = c("turquoise", "coral")) +
  theme_minimal()

p2 <- ggplot(castle_dat, aes(x = .fitted, group = post, fill = post)) +
  #geom_mirror_histogram(bins = 30, alpha = .6)
  geom_mirror_histogram(bins = 30, alpha = 1, aes(fill = factor(post), weight = w_att)) +
  theme(legend.position = "bottom") +
  labs(x = "Propensity Score", fill = "Passed Castle Doctrine", caption = "ATT") +
  #ggtitle("ATT") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(labels = c("No", "Yes"), values = c("turquoise", "coral")) +
  theme_minimal()

p1 + p2 + plot_layout(guides = "collect") & theme(legend.position = "bottom")

```

```{r}
weighted_for_love <- tidy_smd(
  castle_dat,
  .vars = c(assault, burglary, homicide, motor, robbery, robbery_gun_r),
  .group = post,
  .wts = c(w_att)
)

ggplot(data = weighted_for_love, aes(x = abs(smd), y = variable, group = method, color = method)) +
  geom_love() +
  theme_minimal()
```

```{r}
# non-splined model
propensity_model_test <- glm(post ~ homicide + burglary + assault + motor + robbery + robbery_gun_r , data = castle_dat, family = "binomial")

castle_dat_test <- propensity_model_test |>
  augment(type.predict = "response", data = castle_dat) |>
  mutate(w_att = wt_att(.fitted, post, exposure_type = "binary"))

weighted_for_love <- tidy_smd(
  castle_dat_test,
  .vars = c(assault, burglary, homicide, motor, robbery, robbery_gun_r),
  .group = post,
  .wts = c(w_att)
)

ggplot(data = weighted_for_love, aes(x = abs(smd), y = variable, group = method, color = method)) +
  geom_love() +
  theme_minimal()

ggplot(castle_dat_test, aes(x = .fitted, group = post, fill = post)) +
  #geom_mirror_histogram(bins = 30, alpha = .6)
  geom_mirror_histogram(bins = 30, alpha = 1, aes(fill = factor(post), weight = w_att)) +
  theme(legend.position = "bottom") +
  labs(x = "Propensity Score", fill = "Passed Castle Doctrine", caption = "ATT") +
  #ggtitle("ATT") +
  scale_y_continuous(labels = abs) +
  scale_fill_manual(labels = c("No", "Yes"), values = c("turquoise", "coral")) +
  theme_minimal()
```

```{r}
set.seed(229425)

standardized_model <- lm(murder ~ post*years_after_treat, data = castle_dat, weights = w_att)

df_sim_baseline <- castle_dat |>
  select()
```

```{r}
standardized_model <- lm(murder ~ post*years_after_treat, data = castle_dat, weights = w_att)

castle_dat_exp <- castle_dat |>
  filter(is.na(years_after_treat) == FALSE)

castle_dat_minus_2 <- castle_dat_exp |>
  mutate(years_after_treat = -2, post = 0)

castle_dat_plus_2 <- castle_dat_exp |>
  mutate(years_after_treat = 2, post = 1)

new_data_plus_2 <- standardized_model |>
  augment(newdata = castle_dat_plus_2) |>
  rename(murder_est = .fitted)

new_data_minus_2 <- standardized_model |>
  augment(newdata = castle_dat_minus_2) |>
  rename(murder_est = .fitted)

mean(new_data_plus_2$murder_est) - mean(new_data_minus_2$murder_est)


# new_data <- tibble(
#   years_after_treat = rep(seq(min(castle_dat$years_after_treat, na.rm = TRUE)), max(castle_dat$years_after_treat, na.rm = TRUE), 2),
#   post = rep(c(0, 1), each = 100)
# )
# 
# new_data <- standardized_model |>
#   augment(newdata = new_data)
# 
# four_prior <- castle_dat |>
#   mutate(years_after_treat = rep(-4, nrow(castle_dat)))
# 
# four_post <- castle_dat |>
#   mutate(years_after_treat = rep(4, nrow(castle_dat)))
# 
# predicted_four_prior <- standardized_model |>
#   augment(newdata = four_prior) |>
#   select(four_ = .fitted)
# 
# predicted_post <- standardized_model |>
#   augment(newdata = sixty) |>
#   select(sixty_posted_minutes = .fitted)
```

```{r}
standardized_model <- lm(murder ~ post*years_after_treat, data = castle_dat, weights = w_att)

castle_dat_minus_2_yes <- castle_dat |>
  mutate(years_after_treat = -2, post = 1)

castle_dat_minus_2_no <- castle_dat |>
  mutate(years_after_treat = -2, post = 0)

castle_dat_plus_2_yes <- castle_dat |>
  mutate(years_after_treat = 2, post = 1)

castle_dat_plus_2_no <- castle_dat |>
  mutate(years_after_treat = 2, post = 0)


new_data_plus_2_yes <- standardized_model |>
  augment(newdata = castle_dat_plus_2_yes) |>
  rename(murder_est = .fitted)

new_data_plus_2_no <- standardized_model |>
  augment(newdata = castle_dat_plus_2_no) |>
  rename(murder_est = .fitted)

new_data_minus_2_yes <- standardized_model |>
  augment(newdata = castle_dat_minus_2_yes) |>
  rename(murder_est = .fitted)

new_data_minus_2_no <- standardized_model |>
  augment(newdata = castle_dat_minus_2_no) |>
  rename(murder_est = .fitted)

(mean(new_data_plus_2_yes$murder_est) - mean(new_data_minus_2_yes$murder_est)) - (mean(new_data_plus_2_no$murder_est) - mean(new_data_minus_2_no$murder_est))

```

```{r}
standardized_model <- lm(murder ~ post*years_after_treat, data = castle_dat, weights = w_att)

castle_dat_minus_4_yes <- castle_dat |>
  mutate(years_after_treat = -4, post = 1)

castle_dat_minus_4_no <- castle_dat |>
  mutate(years_after_treat = -4, post = 0)

castle_dat_plus_4_yes <- castle_dat |>
  mutate(years_after_treat = 4, post = 1)

castle_dat_plus_4_no <- castle_dat |>
  mutate(years_after_treat = 4, post = 0)


new_data_plus_4_yes <- standardized_model |>
  augment(newdata = castle_dat_plus_4_yes) |>
  rename(murder_est = .fitted)

new_data_plus_4_no <- standardized_model |>
  augment(newdata = castle_dat_plus_4_no) |>
  rename(murder_est = .fitted)

new_data_minus_4_yes <- standardized_model |>
  augment(newdata = castle_dat_minus_4_yes) |>
  rename(murder_est = .fitted)

new_data_minus_4_no <- standardized_model |>
  augment(newdata = castle_dat_minus_4_no) |>
  rename(murder_est = .fitted)

(mean(new_data_plus_4_yes$murder_est) - mean(new_data_minus_4_yes$murder_est)) - (mean(new_data_plus_4_no$murder_est) - mean(new_data_minus_4_no$murder_est))
```

```{r}
years_pre_post <- c(1:4)

estimate_df <- data.frame("years_pre_post" = years_pre_post,
                           "ATT_est" = rep(NA, 4))

for (j in years_pre_post){
    
    standardized_model <- lm(murder ~ post*years_after_treat,
                        data = castle_dat, weights = w_att)
    
    castle_dat_minus_j_yes <- castle_dat |>
      mutate(years_after_treat = -1*j, post = 1)
  
    castle_dat_minus_j_no <- castle_dat |>
      mutate(years_after_treat = -1*j, post = 0)
    
    castle_dat_plus_j_yes <- castle_dat |>
      mutate(years_after_treat = j, post = 1)
    
    castle_dat_plus_j_no <- castle_dat |>
      mutate(years_after_treat = j, post = 0)
    
    new_data_plus_j_yes <- standardized_model |>
      augment(newdata = castle_dat_plus_j_yes) |>
      rename(murder_est = .fitted)
    
    new_data_plus_j_no <- standardized_model |>
      augment(newdata = castle_dat_plus_j_no) |>
      rename(murder_est = .fitted)
    
    new_data_minus_j_yes <- standardized_model |>
      augment(newdata = castle_dat_minus_j_yes) |>
      rename(murder_est = .fitted)
    
    new_data_minus_j_no <- standardized_model |>
      augment(newdata = castle_dat_minus_j_no) |>
      rename(murder_est = .fitted)
    
    estimate_df$years_pre_post[j] <- j
    
    estimate_df$ATT_est[j] <- (mean(new_data_plus_j_yes$murder_est) -
                                 mean(new_data_minus_j_yes$murder_est)) -
                              (mean(new_data_plus_j_no$murder_est) -
                                 mean(new_data_minus_j_no$murder_est))
  }
estimate_df
```


# Uncertainty:

```{r}
set.seed(779)

n_bootstrap <- 1000

bootstrap_df <- data.frame("years_pre_post" = years_pre_post,
                           "mean_ATT" = rep(NA, 4),
                           "sd_ATT" = rep(NA, 4),
                           "ci.l" = rep(NA, 4),
                           "ci.u" = rep(NA, 4))

for (j in years_pre_post){
  
  bootstrap_est <- vector(length = n_bootstrap)
  
  for (b in 1:n_bootstrap){
    boot_dat <- castle_dat |> 
      slice_sample(n = nrow(castle_dat), replace = T)
    
    standardized_boot <- lm(murder ~ post*years_after_treat,
                        data = boot_dat, weights = w_att)
    
    boot_dat_minus_j_yes <- boot_dat |>
      mutate(years_after_treat = -1*j, post = 1)
  
    boot_dat_minus_j_no <- boot_dat |>
      mutate(years_after_treat = -1*j, post = 0)
    
    boot_dat_plus_j_yes <- boot_dat |>
      mutate(years_after_treat = j, post = 1)
    
    boot_dat_plus_j_no <- boot_dat |>
      mutate(years_after_treat = j, post = 0)
    
    new_data_plus_j_yes <- standardized_boot |>
      augment(newdata = boot_dat_plus_j_yes) |>
      rename(murder_est = .fitted)
    
    new_data_plus_j_no <- standardized_boot |>
      augment(newdata = boot_dat_plus_j_no) |>
      rename(murder_est = .fitted)
    
    new_data_minus_j_yes <- standardized_boot |>
      augment(newdata = boot_dat_minus_j_yes) |>
      rename(murder_est = .fitted)
    
    new_data_minus_j_no <- standardized_boot |>
      augment(newdata = boot_dat_minus_j_no) |>
      rename(murder_est = .fitted)
    
    bootstrap_est[b] <- (mean(new_data_plus_j_yes$murder_est) - mean(new_data_minus_j_yes$murder_est)) -   (mean(new_data_plus_j_no$murder_est) - mean(new_data_minus_j_no$murder_est))
    
  }
  
  bootstrap_df$mean_ATT[j] <- mean(bootstrap_est)
  
  bootstrap_df$sd_ATT[j] <- sd(bootstrap_est)
  
  bootstrap_df$ci.l[j] <- quantile(bootstrap_est, 0.025)
  
  bootstrap_df$ci.u[j] <- quantile(bootstrap_est, 0.975)
}

bootstrap_df
```

# Sensitivity Analysis:

```{r}
#Unmeasured confounder to make significant negative effect - 1 year pre/post
ci.u <- bootstrap_df[1,"ci.u"]

adjust_df <- adjust_coef(
  effect_observed = ci.u,
  exposure_confounder_effect = rep(seq(0, -1, by = -0.05), each = 7),
  confounder_outcome_effect = rep(seq(-1, -7, by = -1), times = 21),
  verbose = FALSE
)

ggplot(
  adjust_df,
  aes(
    x = exposure_confounder_effect,
    y = effect_adjusted,
    group = confounder_outcome_effect
  )
) +
  geom_hline(yintercept = ci.u, lty = 2) +
  geom_hline(yintercept = 0, lty = 3) +
  geom_point() +
  geom_line() +
  geom_label(
    data = adjust_df[141:147, ],
    aes(
      x = exposure_confounder_effect,
      y = effect_adjusted,
      label = confounder_outcome_effect
    )
  ) +
  labs(
    x = "Exposure - unmeasured confounder effect",
    y = "Adjusted Effect",
    title = "Effect of Unmeasured Confounder on Treatment Effect"
  )


```

```{r}
#Unmeasured confounder to make significant positive effect - 1 year pre/post
adjust_df <- adjust_coef(
  effect_observed = ci.l,
  exposure_confounder_effect = rep(seq(0, -1, by = -0.05), each = 7),
  confounder_outcome_effect = rep(seq(1, 7, by = 1), times = 21),
  verbose = FALSE
)

ggplot(
  adjust_df,
  aes(
    x = exposure_confounder_effect,
    y = effect_adjusted,
    group = confounder_outcome_effect
  )
) +
  geom_hline(yintercept = ci.l, lty = 2) +
  geom_hline(yintercept = 0, lty = 3) +
  geom_point() +
  geom_line() +
  geom_label(
    data = adjust_df[141:147, ],
    aes(
      x = exposure_confounder_effect,
      y = effect_adjusted,
      label = confounder_outcome_effect
    )
  ) +
  labs(
    x = "Exposure - unmeasured confounder effect",
    y = "Adjusted Effect",
    title = "Effect of Unmeasured Confounder on Treatment Effect"
  )


```


```{r ref.label = knitr::all_labels()}
#| echo: true
#| eval: false
```

# Sensitivity Analysis





Appendix:

```{r}
ggplot(castle_dat, aes(x = burglary, color = factor(post))) + 
  geom_ecdf(aes(weights = w_att)) +
  theme(legend.position = "bottom") +
  labs(x = "Burglary", color = "Castle Implemented") +
  ggtitle("ATT") +
  theme_minimal()
```
